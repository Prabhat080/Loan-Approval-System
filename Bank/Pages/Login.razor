
@page "/login"
@using Bank.Authentication;
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject CurrentUser currentUser
@inject LoanRequests loanRequests

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Email</label>
            <input @bind="model.userEmail" class="form-control" placeholder="User Email" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string userEmail { get; set; }
        public string Password { get; set; }
        public string Role { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserEmail(model.userEmail);
        if (userAccount == null || userAccount.password != model.Password)
        {
            await js.InvokeVoidAsync("alert", @"Either your email or your password is incorrect!Please try to log in again.");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                name = userAccount.name,
                email = userAccount.email,
                role = userAccount.role
            });

        currentUser.Name = userAccount.name;
        currentUser.Email = userAccount.email;
        loanRequests.ReInitialize();
        navManager.NavigateTo("/", true);
    }
}