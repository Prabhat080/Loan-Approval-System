@page "/register"
@using Bank.Authentication

@inject UserAccountService userAccountService
@inject NavigationManager navManager
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject CurrentUser currentUser
@inject LoanRequests loanRequests

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>REGISTER</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.userName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>User Email</label>
            <input @bind="model.userEmail" class="form-control" placeholder="User Email" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Register</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string userName { get; set; }
        public string userEmail { get; set; }
        public string Password { get; set; }
        public string Role { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserEmail(model.userEmail);
        if (userAccount != null)
        {
            await js.InvokeVoidAsync("alert", "Someone is already registered with this email id");
            return;
        }

        var newAccount = new UserAccount { name = model.userName, email = model.userEmail, password = model.Password, role = "customer" };

        if (userAccount == null)
        {
            userAccountService.RegisterNewUser(newAccount);

            currentUser.Name = newAccount.name;
            currentUser.Email = newAccount.email;
        }
        
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                name = newAccount.name,
                email = newAccount.email,
                role = newAccount.role
            });
        loanRequests.ReInitialize();
        navManager.NavigateTo("/", true);
    }
}