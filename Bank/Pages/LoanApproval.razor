@page "/loanapproval"
@attribute [Authorize(Roles ="admin")]

@using Bank.Authentication
@using System.Data.SqlClient;
@inject LoanRequests loanRequests
@inject IJSRuntime js
@inject CurrentUser currentUser
@using MailKit.Net.Smtp;
@using MailKit.Security;
@using MimeKit;
@using MimeKit.Text;

<h3>Approve Loans</h3>
<table class="table">
	<thead>
		<tr>
			<th class="col">Request No.</th>
			<th>Email</th>
			<th>Loan Amt.</th>
			<th>Action</th>
		</tr>
	</thead>
	<tbody>
		@for (int i = 1; i<=loanRequests.pending.Count; i++)
		{
			var loan = loanRequests.pending[i-1];
			<tr>
				<th class="row">@i</th>
				<td>@loan.email</td>
				<td>@loan.loan</td>
				<td>
					<a class="btn btn-primary btn-sm" @onclick="()=>ApproveRequest(loan.id)">Approve</a>
					<button type="submit" class="btn btn-danger btn-sm" @onclick="()=>RejectRequest(loan.id)">Reject</button>
				</td>
			</tr>
		}
	</tbody>
</table>

<h1>@message</h1>

@code {
	private string message { get; set; } = "";

	private async Task SendMail(string EmailId, string Message)
	{
		try
		{
			var email = new MimeMessage();

			email.From.Add(MailboxAddress.Parse("blackmass164@gmail.com"));
			email.To.Add(MailboxAddress.Parse(EmailId));
			email.Subject = "Regarding approval of you loan request";
			email.Body = new TextPart(TextFormat.Html) { Text = Message };

			using var smtp = new SmtpClient();
			smtp.Connect("smtp.gmail.com", 587, SecureSocketOptions.StartTls);

			smtp.Authenticate("blackmass164@gmail.com", "setgapxvmzexbpjd");

			smtp.Send(email);

			smtp.Disconnect(true);

		}
		catch (Exception ex)
		{
			message = ex.ToString();
		}
	}
	private async Task ApproveRequest(int id)
	{
		string connectionString = "Data Source=.\\sqlexpress;Initial Catalog=mystore;Integrated Security=True";

		try
		{
			using (SqlConnection connection = new SqlConnection(connectionString))
			{
				connection.Open();

				string sql = "DELETE from loans where id = @id";

				using (SqlCommand command = new SqlCommand(sql, connection))
				{
					command.Parameters.AddWithValue("@id", "" + id);
					command.ExecuteNonQuery();
				}
			}

			for (int i = 0; i < loanRequests.pending.Count; i++)
			{
				var user = new LoanUser();

				user.id = loanRequests.pending[i].id;
				user.email = loanRequests.pending[i].email;
				user.loan = loanRequests.pending[i].loan;
				user.status = 1;

				if (loanRequests.pending[i].id == id)
				{
					try
					{
						using (SqlConnection connection = new SqlConnection(connectionString))
						{
							connection.Open();

							string sql = "INSERT INTO processedLoans (email, amount, status) VALUES(@email, @amount, @status)";

							using (SqlCommand command = new SqlCommand(sql, connection))
							{
								command.Parameters.AddWithValue("@email", user.email);
								command.Parameters.AddWithValue("@amount", ""+user.loan);
								command.Parameters.AddWithValue("@status", ""+user.status);

								command.ExecuteNonQuery();
							}
						}
					}
					catch (Exception ex)
					{
						await js.InvokeVoidAsync("alert", ex.ToString());
						Console.WriteLine("Error: ", ex.ToString());
					}

					await SendMail(user.email, "Your request has been approved!");

					loanRequests.pending.RemoveAt(i);
					loanRequests.ReInitialize();
					break;
				}
			}
			await js.InvokeVoidAsync("alert", "Loan Request Approved successfully");
		}
		catch (Exception ex)
		{
			Console.WriteLine("Error: ", ex.ToString());
		}
	}

	private async Task RejectRequest(int id)
	{
		string connectionString = "Data Source=.\\sqlexpress;Initial Catalog=mystore;Integrated Security=True";

		try
		{
			using (SqlConnection connection = new SqlConnection(connectionString))
			{
				connection.Open();

				string sql = "DELETE from loans where id = @id";

				using (SqlCommand command = new SqlCommand(sql, connection))
				{
					command.Parameters.AddWithValue("@id", "" + id);
					command.ExecuteNonQuery();
				}
			}
			for(int i = 0; i<loanRequests.pending.Count; i++)
			{
				if(loanRequests.pending[i].id == id)
				{
					var user = new LoanUser();

					user.id = loanRequests.pending[i].id;
					user.email = loanRequests.pending[i].email;
					user.loan = loanRequests.pending[i].loan;
					user.status = 0;

					try
					{
						using (SqlConnection connection = new SqlConnection(connectionString))
						{
							connection.Open();

							string sql = "INSERT INTO processedLoans (email, amount, status) VALUES(@email, @amount, @status)";

							using (SqlCommand command = new SqlCommand(sql, connection))
							{
								command.Parameters.AddWithValue("@email", user.email);
								command.Parameters.AddWithValue("@amount", "" + user.loan);
								command.Parameters.AddWithValue("@status", "" + user.status);

								command.ExecuteNonQuery();
							}
						}
					}
					catch (Exception ex)
					{
						await js.InvokeVoidAsync("alert",ex.ToString());
						Console.WriteLine("Error: ", ex.ToString());
					}
					await SendMail(user.email, "Your request has been rejected!");

					loanRequests.pending.RemoveAt(i);
					loanRequests.ReInitialize();
					break;
				}
			}
			await js.InvokeVoidAsync("alert", "Loan Request Rejected successfully");
		}
		catch (Exception ex)
		{
			//await js.InvokeVoidAsync("alert", ex.ToString());
			Console.WriteLine("Error: ", ex.ToString());
		}
	}
}
